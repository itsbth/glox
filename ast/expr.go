package ast

import (
	"fmt"

	"github.com/itsbth/glox/scanner"
)

//go:generate sh -c "perl6 ../tools/GenerateAst.pl6 | gofmt | goimports > expr.go"
// auto-generated by tools/GenerateAst.pl6 on 2017-10-18T13:27:43.096542+02:00

// Expr is an autogenerated interface for Expr nodes
type Expr interface {
	Accept(visitor ExprVisitor) interface{}
}

// Binary is autogenerated
type Binary struct {
	left     Expr
	operator scanner.TokenType
	right    Expr
}

func NewBinary(left Expr, operator scanner.TokenType, right Expr) *Binary {
	return &Binary{
		left: left, operator: operator, right: right,
	}
}

func (n *Binary) Left() Expr {
	return n.left
}

func (n *Binary) Operator() scanner.TokenType {
	return n.operator
}

func (n *Binary) Right() Expr {
	return n.right
}

func (n *Binary) Accept(visitor ExprVisitor) interface{} {
	return visitor.VisitBinary(n)
}
func (n *Binary) String() string {
	return fmt.Sprintf(
		"Binary(left = %s, operator = %s, right = %s)",
		n.left, n.operator, n.right,
	)
}

// Grouping is autogenerated
type Grouping struct {
	expr Expr
}

func NewGrouping(expr Expr) *Grouping {
	return &Grouping{
		expr: expr,
	}
}

func (n *Grouping) Expr() Expr {
	return n.expr
}

func (n *Grouping) Accept(visitor ExprVisitor) interface{} {
	return visitor.VisitGrouping(n)
}
func (n *Grouping) String() string {
	return fmt.Sprintf(
		"Grouping(expr = %s)",
		n.expr,
	)
}

// Literal is autogenerated
type Literal struct {
	value interface{}
}

func NewLiteral(value interface{}) *Literal {
	return &Literal{
		value: value,
	}
}

func (n *Literal) Value() interface{} {
	return n.value
}

func (n *Literal) Accept(visitor ExprVisitor) interface{} {
	return visitor.VisitLiteral(n)
}
func (n *Literal) String() string {
	return fmt.Sprintf(
		"Literal(value = %s)",
		n.value,
	)
}

// Unary is autogenerated
type Unary struct {
	operator scanner.TokenType
	right    Expr
}

func NewUnary(operator scanner.TokenType, right Expr) *Unary {
	return &Unary{
		operator: operator, right: right,
	}
}

func (n *Unary) Operator() scanner.TokenType {
	return n.operator
}

func (n *Unary) Right() Expr {
	return n.right
}

func (n *Unary) Accept(visitor ExprVisitor) interface{} {
	return visitor.VisitUnary(n)
}
func (n *Unary) String() string {
	return fmt.Sprintf(
		"Unary(operator = %s, right = %s)",
		n.operator, n.right,
	)
}

// Identifier is autogenerated
type Identifier struct {
	name string
}

func NewIdentifier(name string) *Identifier {
	return &Identifier{
		name: name,
	}
}

func (n *Identifier) Name() string {
	return n.name
}

func (n *Identifier) Accept(visitor ExprVisitor) interface{} {
	return visitor.VisitIdentifier(n)
}
func (n *Identifier) String() string {
	return fmt.Sprintf(
		"Identifier(name = %s)",
		n.name,
	)
}

type ExprVisitor interface {
	VisitBinary(node *Binary) interface{}
	VisitGrouping(node *Grouping) interface{}
	VisitLiteral(node *Literal) interface{}
	VisitUnary(node *Unary) interface{}
	VisitIdentifier(node *Identifier) interface{}
}
