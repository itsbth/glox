# globals :(
my $root;
my @nodes;

sub header {
  qq:to/EOF/;
  package ast
  //go:generate sh -c "perl6 ../tools/GenerateAst.pl6 | gofmt | goimports > expr.go"
  // auto-generated by tools/GenerateAst.pl6 on {DateTime.now}
  EOF
}

sub root(Str $name) {
  $root = $name;
  @nodes = ();
  qq:to/EOF/;
  // $name is an autogenerated interface for $name nodes
  type $name interface \{
    Accept(visitor $($name)Visitor) interface\{}
  }
  EOF
}

sub node(Str $name, *@fields) {
  @nodes.push($name);
  my @pairs = @fields.map(&kv);
  my @names = @pairs.map(*[0]);
  qq:to/EOF/;
  // $name is autogenerated
  type $name struct \{
    @pairs[].join("\n")
  }
  func New$name\(@pairs[].join(',')) *$name \{
    return &$name\{
      @names.map({ "$_: $_," })
    }
  }
  @pairs.map(-> ($k, $v) {"
    func (n *$name) $k.wordcase()\() $v \{
      return n.$k
    }
  "})
  func (n *$name) Accept(visitor {$root}Visitor) interface\{} \{
    return visitor.Visit$name\(n)
  }
  func (n *$name) String() string \{
    return fmt.Sprintf(
      "$name\(@names[].map({ "$_ = %s"}).join(', '))",
      @names[][].map({ "n.$_," })
    )
  }
  EOF
}

sub visitor {
  qq:to/EOF/;
  type {$root}Visitor interface \{
    @nodes[].map({ "Visit$_\(node *$_) interface\{}" }).join("\n")
  }
  EOF
}

say header;
say root "Expr";
say node("Binary", (
  :left("Expr"),
  :operator("scanner.TokenType"),
  :right("Expr"),
));
say node("Grouping", (
  :expr("Expr"),
));
say node("Literal", (
  :value("interface\{}"),
));
say node("Unary", (
  :operator("scanner.TokenType"),
  :right("Expr"),
));
say node("Identifier", (
  :name("string"),
));

say visitor;
